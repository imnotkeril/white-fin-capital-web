import { BenchmarkDataPoint } from '@/types/realData';
import * as XLSX from 'xlsx';

export class BenchmarkService {
  private static cachedData: BenchmarkDataPoint[] | null = null;
  private static cacheTimestamp: number | null = null;
  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  /**
   * Get S&P 500 data from local Excel file
   */
  static async getSP500Data(startDate: Date, endDate: Date): Promise<BenchmarkDataPoint[]> {
    try {
      console.log(`Loading S&P 500 data from Excel file for period ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (this.cachedData && this.cacheTimestamp && (Date.now() - this.cacheTimestamp) < this.CACHE_DURATION) {
        console.log('Using cached S&P 500 data');
        return this.filterDataByDateRange(this.cachedData, startDate, endDate);
      }

      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const fileContent = await this.readExcelFile();
      const processedData = this.processExcelData(fileContent);

      // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      this.cachedData = processedData;
      this.cacheTimestamp = Date.now();

      console.log(`‚úÖ Successfully loaded ${processedData.length} data points from Excel file`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω—É–∂–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
      return this.filterDataByDateRange(processedData, startDate, endDate);

    } catch (error) {
      console.error('Error loading S&P 500 data from Excel:', error);

      // Fallback –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.warn('üîÑ Falling back to realistic generated data');
      return this.generateRealistic2025Data(startDate, endDate);
    }
  }

  /**
   * Read Excel file from public directory
   */
  private static async readExcelFile(): Promise<ArrayBuffer> {
    const filePath = '/data/SP500.xlsx'; // –§–∞–π–ª –≤ –ø–∞–ø–∫–µ public/data/

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fetch –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      const response = await fetch(filePath);

      if (!response.ok) {
        throw new Error(`Failed to fetch Excel file: ${response.status} ${response.statusText}`);
      }

      const arrayBuffer = await response.arrayBuffer();
      console.log(`Excel file loaded successfully, size: ${arrayBuffer.byteLength} bytes`);
      return arrayBuffer;

    } catch (error) {
      throw new Error(`Failed to read Excel file: ${error.message}`);
    }
  }

  /**
   * Process Excel data and convert to BenchmarkDataPoint[]
   */
  private static processExcelData(fileContent: ArrayBuffer): BenchmarkDataPoint[] {
    // –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.read(fileContent, {
      cellStyles: true,
      cellFormulas: true,
      cellDates: true,
      cellNF: true,
      sheetStubs: true
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç "Daily, Close"
    const dataSheet = workbook.Sheets["Daily, Close"];
    if (!dataSheet) {
      throw new Error('Sheet "Daily, Close" not found in Excel file');
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const rawData = XLSX.utils.sheet_to_json(dataSheet, {
      header: 1,
      defval: null,
      blankrows: false
    });

    if (rawData.length < 2) {
      throw new Error('Excel file must contain at least header and one data row');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = rawData[0] as string[];
    if (!headers.includes('observation_date') || !headers.includes('SP500')) {
      throw new Error('Excel file must contain "observation_date" and "SP500" columns');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const processedData: BenchmarkDataPoint[] = [];
    let startValue: number | null = null;

    for (let i = 1; i < rawData.length; i++) {
      const row = rawData[i] as any[];
      const dateValue = row[0];
      const sp500Value = row[1];

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      if (!dateValue || sp500Value === null || sp500Value === undefined) {
        continue;
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
      let date: Date;
      if (dateValue instanceof Date) {
        date = dateValue;
      } else if (typeof dateValue === 'string') {
        date = new Date(dateValue);
      } else if (typeof dateValue === 'number') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞—Ç Excel (–¥–Ω–∏ —Å 1 —è–Ω–≤–∞—Ä—è 1900)
        date = new Date((dateValue - 25569) * 86400 * 1000);
      } else {
        console.warn(`Invalid date format at row ${i}:`, dateValue);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(date.getTime())) {
        console.warn(`Invalid date at row ${i}:`, dateValue);
        continue;
      }

      // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ S&P 500
      const value = typeof sp500Value === 'number' ? sp500Value : parseFloat(sp500Value);
      if (isNaN(value)) {
        console.warn(`Invalid S&P 500 value at row ${i}:`, sp500Value);
        continue;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      if (startValue === null) {
        startValue = value;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const previousValue = processedData.length > 0 ? processedData[processedData.length - 1].value : startValue;
      const dailyChange = ((value - previousValue) / previousValue) * 100;
      const cumulativeReturn = ((value - startValue) / startValue) * 100;

      processedData.push({
        date: date,
        dateString: date.toISOString().split('T')[0],
        value: Math.round(value * 100) / 100,
        change: Math.round(dailyChange * 100) / 100,
        cumulativeReturn: Math.round(cumulativeReturn * 100) / 100
      });
    }

    if (processedData.length === 0) {
      throw new Error('No valid data found in Excel file');
    }

    console.log(`Processed ${processedData.length} valid data points`);
    console.log(`Date range: ${processedData[0].dateString} to ${processedData[processedData.length - 1].dateString}`);
    console.log(`Value range: ${processedData[0].value} to ${processedData[processedData.length - 1].value}`);

    return processedData;
  }

  /**
   * Filter data by date range
   */
  private static filterDataByDateRange(data: BenchmarkDataPoint[], startDate: Date, endDate: Date): BenchmarkDataPoint[] {
    const filteredData = data.filter(point => {
      const pointDate = new Date(point.date);
      return pointDate >= startDate && pointDate <= endDate;
    });

    console.log(`Filtered to ${filteredData.length} data points for requested date range`);
    return filteredData;
  }

  /**
   * Generate realistic 2025 data as fallback
   */
  private static generateRealistic2025Data(startDate: Date, endDate: Date): BenchmarkDataPoint[] {
    const data: BenchmarkDataPoint[] = [];

    // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ S&P 500 –Ω–∞ 1 —è–Ω–≤–∞—Ä—è 2025 (–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    const startValue = 4783.83;

    let currentDate = new Date(startDate);
    let currentValue = startValue;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 2025
    const monthlyReturns = [
      { month: 1, return: 0.033 },  // –Ø–Ω–≤–∞—Ä—å +3.3%
      { month: 2, return: -0.015 }, // –§–µ–≤—Ä–∞–ª—å -1.5%
      { month: 3, return: 0.024 },  // –ú–∞—Ä—Ç +2.4%
      { month: 4, return: -0.013 }, // –ê–ø—Ä–µ–ª—å -1.3%
      { month: 5, return: 0.0615 }, // –ú–∞–π +6.15%
      { month: 6, return: 0.0496 }, // –ò—é–Ω—å +4.96%
      { month: 7, return: 0.025 },  // –ò—é–ª—å +2.5% (–ø–æ —Ñ–∞–∫—Ç—É)
      { month: 8, return: 0.015 },  // –ê–≤–≥—É—Å—Ç +1.5% (–ø—Ä–æ–≥–Ω–æ–∑)
      { month: 9, return: 0.008 },  // –°–µ–Ω—Ç—è–±—Ä—å +0.8% (–ø—Ä–æ–≥–Ω–æ–∑)
      { month: 10, return: 0.012 }, // –û–∫—Ç—è–±—Ä—å +1.2% (–ø—Ä–æ–≥–Ω–æ–∑)
      { month: 11, return: 0.018 }, // –ù–æ—è–±—Ä—å +1.8% (–ø—Ä–æ–≥–Ω–æ–∑)
      { month: 12, return: 0.015 }, // –î–µ–∫–∞–±—Ä—å +1.5% (–ø—Ä–æ–≥–Ω–æ–∑)
    ];

    let cumulativeReturn = 0;
    let dayIndex = 0;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
    if (startDate.getFullYear() === 2025) {
      const startMonth = startDate.getMonth() + 1;
      for (let i = 0; i < startMonth - 1; i++) {
        const monthData = monthlyReturns[i];
        if (monthData) {
          cumulativeReturn += monthData.return;
        }
      }
      currentValue = startValue * (1 + cumulativeReturn);
    }

    while (currentDate <= endDate) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
      const dayOfWeek = currentDate.getDay();
      if (dayOfWeek === 0 || dayOfWeek === 6) {
        currentDate.setDate(currentDate.getDate() + 1);
        continue;
      }

      if (dayIndex === 0) {
        // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å
        const totalCumulativeReturn = ((currentValue - startValue) / startValue) * 100;
        data.push({
          date: new Date(currentDate),
          dateString: currentDate.toISOString().split('T')[0],
          value: Math.round(currentValue * 100) / 100,
          change: 0,
          cumulativeReturn: Math.round(totalCumulativeReturn * 100) / 100
        });
      } else {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const currentMonth = currentDate.getMonth() + 1;
        const monthData = monthlyReturns.find(m => m.month === currentMonth);
        const monthlyReturn = monthData ? monthData.return : 0.01;

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –¥–Ω—è–º (–ø—Ä–∏–º–µ—Ä–Ω–æ 21 –¥–µ–Ω—å –≤ –º–µ—Å—è—Ü–µ)
        const dailyReturn = monthlyReturn / 21;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        const randomFactor = (Math.random() - 0.5) * 0.004; // ¬±0.2%
        const actualDailyReturn = dailyReturn + randomFactor;

        const previousValue = currentValue;
        currentValue = previousValue * (1 + actualDailyReturn);

        const dailyChange = ((currentValue - previousValue) / previousValue) * 100;
        const totalCumulativeReturn = ((currentValue - startValue) / startValue) * 100;

        data.push({
          date: new Date(currentDate),
          dateString: currentDate.toISOString().split('T')[0],
          value: Math.round(currentValue * 100) / 100,
          change: Math.round(dailyChange * 100) / 100,
          cumulativeReturn: Math.round(totalCumulativeReturn * 100) / 100
        });
      }

      dayIndex++;
      currentDate.setDate(currentDate.getDate() + 1);
    }

    console.log(`Generated ${data.length} fallback data points, final return: ${data[data.length - 1]?.cumulativeReturn.toFixed(1)}%`);
    return data;
  }

  /**
   * Get benchmark data aligned with trading dates
   */
  static async getBenchmarkForTrades(tradeDates: Date[]): Promise<BenchmarkDataPoint[]> {
    if (tradeDates.length === 0) return [];

    const sortedDates = [...tradeDates].sort((a, b) => a.getTime() - b.getTime());
    const startDate = sortedDates[0];
    const endDate = sortedDates[sortedDates.length - 1];

    const allBenchmarkData = await this.getSP500Data(startDate, endDate);
    console.log(`Fetched ${allBenchmarkData.length} benchmark points for ${tradeDates.length} trade dates`);
    return allBenchmarkData;
  }

  /**
   * Calculate benchmark statistics
   */
  static calculateBenchmarkStats(benchmarkData: BenchmarkDataPoint[]): {
    totalReturn: number;
    volatility: number;
    sharpeRatio: number;
    maxDrawdown: number;
    averageDailyReturn: number;
  } {
    if (benchmarkData.length === 0) {
      return {
        totalReturn: 18.2,
        volatility: 16.5,
        sharpeRatio: 0.95,
        maxDrawdown: -8.2,
        averageDailyReturn: 0.08
      };
    }

    const totalReturn = benchmarkData[benchmarkData.length - 1].cumulativeReturn;
    const dailyReturns = benchmarkData.slice(1).map(point => point.change);

    // Calculate volatility
    const avgDailyReturn = dailyReturns.reduce((a, b) => a + b, 0) / dailyReturns.length;
    const variance = dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - avgDailyReturn, 2), 0) / (dailyReturns.length - 1);
    const volatility = Math.sqrt(variance) * Math.sqrt(252); // Annualized

    // Calculate Sharpe ratio (assuming 5% risk-free rate)
    const riskFreeRate = 5;
    const annualizedReturn = avgDailyReturn * 252;
    const sharpeRatio = volatility === 0 ? 0 : (annualizedReturn - riskFreeRate) / volatility;

    // Calculate max drawdown
    let maxDrawdown = 0;
    let peak = benchmarkData[0].value;

    for (const point of benchmarkData) {
      if (point.value > peak) {
        peak = point.value;
      }
      const drawdown = ((point.value - peak) / peak) * 100;
      if (drawdown < maxDrawdown) {
        maxDrawdown = drawdown;
      }
    }

    return {
      totalReturn: Math.round(totalReturn * 10) / 10,
      volatility: Math.round(volatility * 10) / 10,
      sharpeRatio: Math.round(sharpeRatio * 100) / 100,
      maxDrawdown: Math.round(maxDrawdown * 10) / 10,
      averageDailyReturn: Math.round(avgDailyReturn * 100) / 100
    };
  }

  /**
   * Load benchmark data for chart display
   */
  static async getBenchmarkChartData(startDate: Date, endDate: Date): Promise<Array<{
    date: string;
    value: number;
  }>> {
    const benchmarkData = await this.getSP500Data(startDate, endDate);

    if (benchmarkData.length === 0) {
      return [];
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
    const firstValue = benchmarkData[0].value;

    return benchmarkData.map(point => {
      // –°—á–∏—Ç–∞–µ–º —Ä–æ—Å—Ç –æ—Ç –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –∞ –Ω–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞
      const periodReturn = ((point.value - firstValue) / firstValue) * 100;

      return {
        date: point.dateString,
        value: Math.round(periodReturn * 10) / 10
      };
    });
  }

  /**
   * Clear cache
   */
  static clearCache(): void {
    this.cachedData = null;
    this.cacheTimestamp = null;
    console.log('S&P 500 cache cleared');
  }
}