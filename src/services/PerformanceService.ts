// src/services/PerformanceService.ts
// –ì–ª–∞–≤–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å performance –º–µ—Ç—Ä–∏–∫–∞–º–∏

import { ExcelProcessor, TradeRecord, BenchmarkPoint } from './ExcelProcessor';
import { PerformanceCalculator } from './PerformanceCalculator';

// –ü—É–±–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export interface KPIMetric {
  label: string;
  value: number;
  format: 'percentage' | 'number' | 'currency';
  trend: 'up' | 'down' | 'neutral';
}

export interface ChartDataPoint {
  date: string;
  value: number;
  label?: string;
}

export interface PortfolioMetrics {
  totalReturn: number;
  winRate: number;
  sharpeRatio: number;
  maxDrawdown: number;
  profitFactor: number;
  totalTrades: number;
  averageHoldingDays: number;
  bestTrade: number;
  worstTrade: number;
}

export interface ComparisonData {
  portfolio: PortfolioMetrics;
  benchmark: {
    totalReturn: number;
    sharpeRatio: number;
  };
  alpha: number;
  beta: number;
  outperformance: number;
}

// –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
interface CachedData {
  trades: TradeRecord[];
  benchmark: BenchmarkPoint[];
  metrics: PortfolioMetrics;
  timestamp: number;
}

export class PerformanceService {
  private static cache: CachedData | null = null;
  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  /**
   * –ü–æ–ª—É—á–∏—Ç—å KPI –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
   */
  static async getKPIMetrics(): Promise<KPIMetric[]> {
    const { metrics } = await this.loadData();

    return [
      {
        label: 'Total Return',
        value: Math.round(metrics.totalReturn * 10) / 10,
        format: 'percentage',
        trend: metrics.totalReturn > 0 ? 'up' : 'down'
      },
      {
        label: 'Win Rate',
        value: Math.round(metrics.winRate * 10) / 10,
        format: 'percentage',
        trend: metrics.winRate > 50 ? 'up' : metrics.winRate > 40 ? 'neutral' : 'down'
      },
      {
        label: 'Sharpe Ratio',
        value: Math.round(metrics.sharpeRatio * 100) / 100,
        format: 'number',
        trend: metrics.sharpeRatio > 1 ? 'up' : metrics.sharpeRatio > 0.5 ? 'neutral' : 'down'
      },
      {
        label: 'Max Drawdown',
        value: Math.round(Math.abs(metrics.maxDrawdown) * 10) / 10,
        format: 'percentage',
        trend: Math.abs(metrics.maxDrawdown) < 10 ? 'up' : Math.abs(metrics.maxDrawdown) < 20 ? 'neutral' : 'down'
      },
      {
        label: 'Profit Factor',
        value: Math.round(metrics.profitFactor * 100) / 100,
        format: 'number',
        trend: metrics.profitFactor > 1.5 ? 'up' : metrics.profitFactor > 1 ? 'neutral' : 'down'
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
   */
  static async getPerformanceChart(): Promise<ChartDataPoint[]> {
    const { trades } = await this.loadData();

    const timeSeriesData = PerformanceCalculator.calculateTimeSeries(trades);

    return timeSeriesData.map(point => ({
      date: point.date.toISOString().split('T')[0],
      value: Math.round(point.cumulativeReturn * 100) / 100,
      label: `${point.cumulativeReturn.toFixed(1)}%`
    }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º
   */
  static async getBenchmarkComparison(): Promise<{
    portfolioData: ChartDataPoint[];
    benchmarkData: ChartDataPoint[];
    comparison: ComparisonData;
  }> {
    const { trades, benchmark, metrics } = await this.loadData();

    // –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    const portfolioTimeSeries = PerformanceCalculator.calculateTimeSeries(trades);
    const portfolioData = portfolioTimeSeries.map(point => ({
      date: point.date.toISOString().split('T')[0],
      value: Math.round(point.cumulativeReturn * 100) / 100
    }));

    // –ì—Ä–∞—Ñ–∏–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    const benchmarkData = benchmark.map(point => ({
      date: point.date.toISOString().split('T')[0],
      value: Math.round(point.cumulativeReturn * 100) / 100
    }));

    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const benchmarkMetrics = PerformanceCalculator.calculateBenchmarkMetrics(
      portfolioTimeSeries,
      benchmark
    );

    const comparison: ComparisonData = {
      portfolio: metrics,
      benchmark: {
        totalReturn: benchmarkData.length > 0 ? benchmarkData[benchmarkData.length - 1].value : 0,
        sharpeRatio: benchmarkMetrics.sharpeRatio
      },
      alpha: benchmarkMetrics.alpha,
      beta: benchmarkMetrics.beta,
      outperformance: metrics.totalReturn - (benchmarkData.length > 0 ? benchmarkData[benchmarkData.length - 1].value : 0)
    };

    return {
      portfolioData,
      benchmarkData,
      comparison
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–π–¥–æ–≤
   */
  static async getTradeStatistics(): Promise<{
    totalTrades: number;
    winningTrades: number;
    losingTrades: number;
    averageGain: number;
    averageLoss: number;
    bestTrade: number;
    worstTrade: number;
    averageHoldingDays: number;
    maxConsecutiveWins: number;
    maxConsecutiveLosses: number;
    lastTradeDate: string;
  }> {
    const { trades, metrics } = await this.loadData();

    const winningTrades = trades.filter(t => t.pnlPercent > 0);
    const losingTrades = trades.filter(t => t.pnlPercent <= 0);

    const consecutiveStats = PerformanceCalculator.calculateConsecutiveWinLoss(trades);

    return {
      totalTrades: trades.length,
      winningTrades: winningTrades.length,
      losingTrades: losingTrades.length,
      averageGain: winningTrades.length > 0 ?
        winningTrades.reduce((sum, t) => sum + t.pnlPercent, 0) / winningTrades.length : 0,
      averageLoss: losingTrades.length > 0 ?
        Math.abs(losingTrades.reduce((sum, t) => sum + t.pnlPercent, 0) / losingTrades.length) : 0,
      bestTrade: metrics.bestTrade,
      worstTrade: metrics.worstTrade,
      averageHoldingDays: metrics.averageHoldingDays,
      maxConsecutiveWins: consecutiveStats.maxWins,
      maxConsecutiveLosses: consecutiveStats.maxLosses,
      lastTradeDate: trades.length > 0 ?
        trades.sort((a, b) => b.exitDate.getTime() - a.exitDate.getTime())[0].exitDate.toISOString().split('T')[0] : ''
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
   */
  static async refreshData(): Promise<void> {
    console.log('üîÑ Force refreshing performance data...');
    this.cache = null;
    await this.loadData();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  static getDataStatus(): {
    isLoaded: boolean;
    lastUpdate: Date | null;
    cacheAge: number;
  } {
    return {
      isLoaded: this.cache !== null,
      lastUpdate: this.cache ? new Date(this.cache.timestamp) : null,
      cacheAge: this.cache ? Date.now() - this.cache.timestamp : 0
    };
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  private static async loadData(): Promise<CachedData> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.cache && (Date.now() - this.cache.timestamp) < this.CACHE_DURATION) {
      console.log('üì¶ Using cached performance data');
      return this.cache;
    }

    try {
      console.log('üìä Loading fresh performance data...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
      const { trades, benchmark } = await ExcelProcessor.loadAllData();

      if (trades.length === 0) {
        throw new Error('No trading data loaded from Excel');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const metrics = PerformanceCalculator.calculateAllMetrics(trades);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.cache = {
        trades,
        benchmark,
        metrics,
        timestamp: Date.now()
      };

      console.log(`‚úÖ Performance data loaded: ${trades.length} trades, ${benchmark.length} benchmark points`);
      console.log(`üìà Total Return: ${metrics.totalReturn.toFixed(1)}%, Win Rate: ${metrics.winRate.toFixed(1)}%`);

      return this.cache;

    } catch (error) {
      console.error('‚ùå Failed to load performance data:', error);

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (this.cache) {
        console.warn('‚ö†Ô∏è Using stale cached data due to loading error');
        return this.cache;
      }

      throw new Error(`Failed to load performance data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
   */
  static formatValue(value: number, format: 'percentage' | 'number' | 'currency'): string {
    switch (format) {
      case 'percentage':
        return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`;
      case 'currency':
        return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
      case 'number':
      default:
        return value.toFixed(2);
    }
  }
}